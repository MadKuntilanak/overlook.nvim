==============================================================================
------------------------------------------------------------------------------
                                                                  *overlook-api*
*overlook.api* Public API functions for overlook.nvim
*OverlookApi*

MIT License Copyright (c) 2025 William Hsieh

==============================================================================

overlook.api provides the public API functions for overlook.nvim, a plugin
for creating stackable floating popups to peek at code locations without
losing your context in the current buffer.

These functions are the primary interface for users to interact with the
plugin through key mappings and commands.

------------------------------------------------------------------------------
Peek Functions

------------------------------------------------------------------------------
                                                           *M.peek_definition()*
                             `M.peek_definition`()
Peek at the LSP definition under the cursor.

Creates a floating popup window displaying the definition of the symbol
under the cursor using LSP information. The popup is added to the current
window's popup stack and can be navigated, edited, and stacked with
additional popups.

If no LSP server is attached or no definition is found, displays an
appropriate notification to the user.

Usage ~
>lua
  vim.keymap.set("n", "<leader>pd", require("overlook.api").peek_definition)
<
------------------------------------------------------------------------------
                                                               *M.peek_cursor()*
                               `M.peek_cursor`()
Peek at the current cursor position.

Creates a floating popup window at the current cursor position, displaying
the current buffer content. This is useful for maintaining visual context
while navigating to other locations.

Usage ~
>lua
  vim.keymap.set("n", "<leader>pp", require("overlook.api").peek_cursor)
<
------------------------------------------------------------------------------
                                                                 *M.peek_mark()*
                                `M.peek_mark`()
Peek at a specific mark location.

Prompts the user to enter a single-character mark name, then creates a
floating popup window displaying the content at that mark's location.
Only accepts single-character mark names (a-z, A-Z, 0-9).

Shows an error notification if the input is invalid or empty.

Usage ~
>lua
  vim.keymap.set("n", "<leader>pm", require("overlook.api").peek_mark)
<
------------------------------------------------------------------------------
Stack Management Functions

------------------------------------------------------------------------------
                                                        *M.restore_all_popups()*
                            `M.restore_all_popups`()
Restore all previously closed popups in the current stack.

Reopens all popups that were closed in the current window's popup stack,
restoring them in their original stacking order. This allows users to
quickly recover their exploration context after accidentally closing popups.

Usage ~
>lua
  vim.keymap.set("n", "<leader>pU", require("overlook.api").restore_all_popups)
<
------------------------------------------------------------------------------
                                                             *M.restore_popup()*
                              `M.restore_popup`()
Restore the most recently closed popup.

Reopens the last popup that was closed in the current window's popup stack.
This provides a quick undo mechanism for popup closures.

Usage ~
>lua
  vim.keymap.set("n", "<leader>pu", require("overlook.api").restore_popup)
<
------------------------------------------------------------------------------
                                                                 *M.close_all()*
                                `M.close_all`()
Close all overlook popups across all windows.

Closes every overlook popup in all window stacks, completely clearing the
overlook state. This is useful for quickly resetting the interface when
you have multiple popup stacks open.

Usage ~
>lua
  vim.keymap.set("n", "<leader>pc", require("overlook.api").close_all)
<
------------------------------------------------------------------------------
Window Promotion Functions (open popups in regular windows)

------------------------------------------------------------------------------
                                                             *M.open_in_split()*
                              `M.open_in_split`()
Open the top popup to a horizontal split window.

Converts the topmost popup in the current stack to a regular horizontal
split window. The popup is closed and its buffer content is opened in
a new split, preserving cursor position and allowing normal window
navigation.

Shows an error if no popup is available to promote.

Usage ~
>lua
  vim.keymap.set("n", "<leader>ps", require("overlook.api").open_in_split)
<
------------------------------------------------------------------------------
                                                            *M.open_in_vsplit()*
                              `M.open_in_vsplit`()
Open the top popup to a vertical split window.

Converts the topmost popup in the current stack to a regular vertical
split window. The popup is closed and its buffer content is opened in
a new vsplit, preserving cursor position and allowing normal window
navigation.

Shows an error if no popup is available to promote.

Usage ~
>lua
  vim.keymap.set("n", "<leader>pv", require("overlook.api").open_in_vsplit)
<
------------------------------------------------------------------------------
                                                               *M.open_in_tab()*
                               `M.open_in_tab`()
Open the top popup to a new tab.

Converts the topmost popup in the current stack to a new tab window.
The popup is closed and its buffer content is opened in a new tab,
preserving cursor position and allowing full tab functionality.

Shows an error if no popup is available to promote.

Usage ~
>lua
  vim.keymap.set("n", "<leader>pt", require("overlook.api").open_in_tab)
<
------------------------------------------------------------------------------
                                                   *M.open_in_original_window()*
                         `M.open_in_original_window`()
Open the top popup to replace the original window content.

Converts the topmost popup to occupy the original window that spawned it.
The popup is closed and its buffer content replaces the original window's
content, preserving cursor position. This effectively "commits" the popup
content to become the main window's content.

Shows an error if no popup is available to promote.

Usage ~
>lua
  vim.keymap.set("n", "<leader>po", require("overlook.api").open_in_original_window)
<

 vim:tw=78:ts=8:noet:ft=help:norl: